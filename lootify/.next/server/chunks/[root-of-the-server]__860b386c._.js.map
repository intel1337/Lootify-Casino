{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/este./Desktop/Lootify-Casino/lootify/src/app/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"../../../prisma/generated/prisma\";\nconst prisma = new PrismaClient();\n\nexport default prisma\n"],"names":[],"mappings":";;;;;;;;;AACA,MAAM,SAAS,IAAI;uCAEJ","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///Users/este./Desktop/Lootify-Casino/lootify/src/app/api/roulette/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/app/lib/prisma';\n\nexport async function POST(request) {\n    try {\n        const body = await request.json();\n        const { userId, argent } = body;\n\n        if (!userId || argent === undefined) {\n            return NextResponse.json(\n                { error: 'Données manquantes' },\n                { status: 400 }\n            );\n        }\n\n        // Générer un nombre aléatoire entre 0 et 99\n        const randomNumber = Math.floor(Math.random() * 100);\n\n        let nouveauScore;\n        let message;\n\n        if (randomNumber === 1) {\n            // Gagné : score x5\n            nouveauScore = argent * 5;\n            message = 'Félicitations ! Vous avez gagné !';\n        } else {\n            // Perdu : score à 0\n            nouveauScore = 0;\n            message = 'Dommage, vous avez perdu !';\n        }\n\n        // Mettre à jour le score de l'utilisateur\n        await prisma.user.update({\n            where: { id: userId },\n            data: { argent: nouveauScore }\n        });\n\n        return NextResponse.json({\n            nouveauScore,\n            message,\n            randomNumber\n        });\n\n    } catch (error) {\n        console.error('Erreur dans la route roulette:', error);\n        return NextResponse.json(\n            { error: 'Erreur serveur' },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG;QAE3B,IAAI,CAAC,UAAU,WAAW,WAAW;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,4CAA4C;QAC5C,MAAM,eAAe,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAEhD,IAAI;QACJ,IAAI;QAEJ,IAAI,iBAAiB,GAAG;YACpB,mBAAmB;YACnB,eAAe,SAAS;YACxB,UAAU;QACd,OAAO;YACH,oBAAoB;YACpB,eAAe;YACf,UAAU;QACd;QAEA,0CAA0C;QAC1C,MAAM,6HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrB,OAAO;gBAAE,IAAI;YAAO;YACpB,MAAM;gBAAE,QAAQ;YAAa;QACjC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB;YACA;YACA;QACJ;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}